apply plugin: 'com.android.application'
apply plugin: "com.liferay.change.log.builder"



println "Generating release notes (releaseNotes.txt)"
def releaseNotes = new File('releaseNotes.txt')
releaseNotes.delete()
def lastTag = ""
def tags = []
def procTags = "git tag -l".execute()
procTags.in.eachLine { line -> tags += line }
tags += "head"

tags.each { tag ->
    releaseNotes << "[[ Changes from $lastTag to $tag ]]\n"
    def cmdLine = "git log $lastTag..$tag --pretty=format:\"%cd - %s\" --date=short"
    //releaseNotes << "$cmdLine\n\n"
    def procCommit = cmdLine.execute()
    procCommit.in.eachLine { line -> releaseNotes << line + "\n" }
    releaseNotes << "\n\n\n"
    lastTag = tag
}
ext {
    app_ver = new ConfigSlurper().parse(new File('app/versioning/version.groovy').toURL())
    build_num = System.getenv('GO_PIPELINE_COUNTER')
    git_rev = 'git rev-parse --verify --short HEAD'.execute().text.trim()
    SUPPORT_LIBRARY_VERSION = '28.0.0'
}

def generateVersionCode(major, minor, patch) {
    if ((major > 99) || (major == 0) || (minor > 99) || (patch > 99)) {
        throw new GradleException("version number out of range")
    }
    major * 1000000 + minor * 10000 + patch * 100
}

def generateVersionName(major, minor, patch, build, hash) {
    def buildStr = build == null ? "-00" : ("-$build")
    def hashStr = hash == null ? "" : ("-$hash")
    writeVersionName(major, minor, patch, build, hash)
    "${major}.${minor}.${patch}${buildStr}${hashStr}"
}

def writeVersionName(major, minor, patch, build, hash) {
    def buildStr = build == null ? "-00" : ("-$build")
    def hashStr = hash == null ? "" : ("-$hash")
    def file = new File("./.version")
    file.createNewFile()
    file.text = "${major}.${minor}.${patch}${buildStr}${hashStr}"
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.wit.autochangelog"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
